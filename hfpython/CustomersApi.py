#!/usr/bin/env python
"""
CustomersApi.py
Copyright 2015 Reverb Technologies, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os
from urllib.parse import quote

from .models import *


class CustomersApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    
    
    def getActive(self, **kwargs):
        r"""Show active alerts for the current user/customer

        Args:
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\Collection\Collection
        """

        allParams = ['country', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getActive" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/alerts'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Collection\Collection')
        return responseObject
        
        
        
    
    def createCustomer(self, **kwargs):
        r"""Create a new customer

        Args:
            
            customer, CustomerPost: Customer payload (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            isSubscribedToNewsletter, : Whether the customer should be subscribed to the newsletter or not (required)
            
            
            subscribeToAbandonment, : Whether the customer should be subscribed to the abandonment campaign or not (required)
            
            
            allowNamelessCustomer, : Allows registering a customer without first name and last name (required)
            
            
            allowPassworlessCustomer, : Allows registering a customer without a password (required)
            
            
            optedOutThirdParty, : Whether the customer should be opted out of 3rd party newsletters (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\Customer\Customer
        """

        allParams = ['customer', 'country', 'isSubscribedToNewsletter', 'subscribeToAbandonment', 'allowNamelessCustomer', 'allowPassworlessCustomer', 'optedOutThirdParty', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createCustomer" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/customers'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        

        

        
        if 'customer' in params:
            bodyParam = params['customer']
        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Customer\Customer')
        return responseObject
        
        
        
    
    def getCustomersBundlesByType(self, **kwargs):
        r"""Get bundles of {type} for all customers

        Args:
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\BundleInfo\BundleInfoCollection
        """

        allParams = ['country', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getCustomersBundlesByType" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/customers/bundles/{type}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\BundleInfo\BundleInfoCollection')
        return responseObject
        
        
        
    
    def getCustomerStatuses(self, **kwargs):
        r"""Show customers status

        Args:
            
            customersIds, str: List of customer IDs, Ex: 1,2,3 (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\CustomerStatus\CustomerStatusCollection
        """

        allParams = ['customersIds', 'country', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getCustomerStatuses" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/customers/statuses'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'customersIds' in params:
            queryParams['customersIds'] = self.apiClient.toPathValue(params['customersIds'])
        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\CustomerStatus\CustomerStatusCollection')
        return responseObject
        
        
        
    
    def getCustomer(self, **kwargs):
        r"""Show customer

        Args:
            
            id, str: The id of the user or &#39;me&#39; to get the userId from the login token (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\Customer\Customer
        """

        allParams = ['id', 'country', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getCustomer" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/customers/{id}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Customer\Customer')
        return responseObject
        
        
        
    
    def updateCustomer(self, **kwargs):
        r"""Update an existing customer

        Args:
            
            customer, ApiModel\Customer\CustomerPut: Customer payload (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            id, str: The id of the user or &#39;me&#39; to get the userId from the login token (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\Customer\Customer
        """

        allParams = ['customer', 'country', 'id', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateCustomer" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/customers/{id}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        
        if 'customer' in params:
            bodyParam = params['customer']
        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Customer\Customer')
        return responseObject
        
        
        
    
    def updatePartialCustomer(self, **kwargs):
        r"""Update an existing customer with only some of the customer fields

        Args:
            
            customer, ApiModel\Customer\CustomerPatch: Customer payload (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            id, str: The id of the user or &#39;me&#39; to get the userId from the login token (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\Customer\Customer
        """

        allParams = ['customer', 'country', 'id', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updatePartialCustomer" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/customers/{id}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PATCH'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        
        if 'customer' in params:
            bodyParam = params['customer']
        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Customer\Customer')
        return responseObject
        
        
        
    
    def getCustomerAddresses(self, **kwargs):
        r"""Get customer addresses

        Args:
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            id, str: The id of the user or &#39;me&#39; to get the userId from the login token (required)
            
            
            uniqueAddresses, bool: Provides support to return unique addresses (required)
            
            
            addressType, str: Provides support to return addresses by their type (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
            skip, int: Number of results to skip (required)
            
            
            take, int: Number of results to show (required)
            
            
            sort, str: Sort by field(s) in the response collection.\n *       You can do ASC and DESC by using + and -. Default is +. Ex: ?sort=price,-createdAt (required)
            
            
        
        Returns: ApiModel\CustomerAddress\CustomerAddressCollection
        """

        allParams = ['country', 'id', 'uniqueAddresses', 'addressType', 'locale', 'skip', 'take', 'sort']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getCustomerAddresses" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/customers/{id}/addresses'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'uniqueAddresses' in params:
            queryParams['uniqueAddresses'] = self.apiClient.toPathValue(params['uniqueAddresses'])
        
        if 'addressType' in params:
            queryParams['addressType'] = self.apiClient.toPathValue(params['addressType'])
        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        
        if 'skip' in params:
            queryParams['skip'] = self.apiClient.toPathValue(params['skip'])
        
        if 'take' in params:
            queryParams['take'] = self.apiClient.toPathValue(params['take'])
        
        if 'sort' in params:
            queryParams['sort'] = self.apiClient.toPathValue(params['sort'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\CustomerAddress\CustomerAddressCollection')
        return responseObject
        
        
        
    
    def createCustomerAddress(self, **kwargs):
        r"""Create a address

        Args:
            
            address, Address: Address payload (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            id, int: Resource ID (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\CustomerAddress\CustomerAddress
        """

        allParams = ['address', 'country', 'id', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createCustomerAddress" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/customers/{id}/addresses'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        
        if 'address' in params:
            bodyParam = params['address']
        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\CustomerAddress\CustomerAddress')
        return responseObject
        
        
        
    
    def getCustomerBundleByType(self, **kwargs):
        r"""Get bundle of the given type for a given customer id

        Args:
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            id, str: The id of the user or &#39;me&#39; to get the userId from the login token (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\BundleInfo\BundleInfo
        """

        allParams = ['country', 'id', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getCustomerBundleByType" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/customers/{id}/bundle/{type}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\BundleInfo\BundleInfo')
        return responseObject
        
        
        
    
    def createBundleOfTypeForCustomer(self, **kwargs):
        r"""Create bundle of the given type for a given customer id

        Args:
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            id, str: The id of the user or &#39;me&#39; to get the userId from the login token (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: 
        """

        allParams = ['country', 'id', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createBundleOfTypeForCustomer" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/customers/{id}/bundle/{type}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    
    def getCustomerClub(self, **kwargs):
        r"""Get customer club information

        Args:
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            id, str: The id of the user or &#39;me&#39; to get the userId from the login token (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
            skip, int: Number of results to skip (required)
            
            
            take, int: Number of results to show (required)
            
            
            sort, str: Sort by field(s) in the response collection.\n *       You can do ASC and DESC by using + and -. Default is +. Ex: ?sort=price,-createdAt (required)
            
            
        
        Returns: ApiModel\Collection\Collection
        """

        allParams = ['country', 'id', 'locale', 'skip', 'take', 'sort']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getCustomerClub" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/customers/{id}/club'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        
        if 'skip' in params:
            queryParams['skip'] = self.apiClient.toPathValue(params['skip'])
        
        if 'take' in params:
            queryParams['take'] = self.apiClient.toPathValue(params['take'])
        
        if 'sort' in params:
            queryParams['sort'] = self.apiClient.toPathValue(params['sort'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Collection\Collection')
        return responseObject
        
        
        
    
    def getCustomerCredit(self, **kwargs):
        r"""Get customer credit

        Args:
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            id, str: The id of the user or &#39;me&#39; to get the userId from the login token (required)
            
            
            includeCreditEntries, bool: Include an array of CreditEntry in response (credit claim AB test) (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
            skip, int: Number of results to skip (required)
            
            
            take, int: Number of results to show (required)
            
            
            sort, str: Sort by field(s) in the response collection.\n *       You can do ASC and DESC by using + and -. Default is +. Ex: ?sort=price,-createdAt (required)
            
            
        
        Returns: ApiModel\Customer\Credit\Credit
        """

        allParams = ['country', 'id', 'includeCreditEntries', 'locale', 'skip', 'take', 'sort']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getCustomerCredit" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/customers/{id}/credit'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'includeCreditEntries' in params:
            queryParams['includeCreditEntries'] = self.apiClient.toPathValue(params['includeCreditEntries'])
        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        
        if 'skip' in params:
            queryParams['skip'] = self.apiClient.toPathValue(params['skip'])
        
        if 'take' in params:
            queryParams['take'] = self.apiClient.toPathValue(params['take'])
        
        if 'sort' in params:
            queryParams['sort'] = self.apiClient.toPathValue(params['sort'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Customer\Credit\Credit')
        return responseObject
        
        
        
    
    def getCustomerDeliveries(self, **kwargs):
        r"""Get customer deliveries

        Args:
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            id, str: The id of the user or &#39;me&#39; to get the userId from the login token (required)
            
            
            rangeStart, str: The first delivery in the list.\n     *         Date as string (YYYY-MM-DD)) (required)
            
            
            rangeEnd, str: Last delivery in the list. Uses the same format as &#39;rangeStart&#39;. (required)
            
            
            rangeMiddle, str: The middle delivery in the list. Uses the same format as &#39;rangeStart&#39;.\n     *         Prefer sending also the desired &#39;numberOfDeliveries&#39;. (required)
            
            
            numberOfDeliveries, str: The number of deliveries in the list.\n     *         NOTE: It currently works only in combination with &#39;rangeMiddle&#39;. (required)
            
            
            bypassPastDeliveries, bool: Show only deliveries in the future (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
            skip, int: Number of results to skip (required)
            
            
            take, int: Number of results to show (required)
            
            
            sort, str: Sort by field(s) in the response collection.\n *       You can do ASC and DESC by using + and -. Default is +. Ex: ?sort=price,-createdAt (required)
            
            
        
        Returns: ApiModel\DeliveryDate\DeliveryDateCollection
        """

        allParams = ['country', 'id', 'rangeStart', 'rangeEnd', 'rangeMiddle', 'numberOfDeliveries', 'bypassPastDeliveries', 'locale', 'skip', 'take', 'sort']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getCustomerDeliveries" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/customers/{id}/deliveries'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'rangeStart' in params:
            queryParams['rangeStart'] = self.apiClient.toPathValue(params['rangeStart'])
        
        if 'rangeEnd' in params:
            queryParams['rangeEnd'] = self.apiClient.toPathValue(params['rangeEnd'])
        
        if 'rangeMiddle' in params:
            queryParams['rangeMiddle'] = self.apiClient.toPathValue(params['rangeMiddle'])
        
        if 'numberOfDeliveries' in params:
            queryParams['numberOfDeliveries'] = self.apiClient.toPathValue(params['numberOfDeliveries'])
        
        if 'bypassPastDeliveries' in params:
            queryParams['bypassPastDeliveries'] = self.apiClient.toPathValue(params['bypassPastDeliveries'])
        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        
        if 'skip' in params:
            queryParams['skip'] = self.apiClient.toPathValue(params['skip'])
        
        if 'take' in params:
            queryParams['take'] = self.apiClient.toPathValue(params['take'])
        
        if 'sort' in params:
            queryParams['sort'] = self.apiClient.toPathValue(params['sort'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\DeliveryDate\DeliveryDateCollection')
        return responseObject
        
        
        
    
    def allocateCustomerToExperiment(self, **kwargs):
        r"""Allocate the customer for the given experiment.

        Args:
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            id, str: The id of the user or &#39;me&#39; to get the userId from the login token (required)
            
            
        
        Returns: 
        """

        allParams = ['country', 'id']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method allocateCustomerToExperiment" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/customers/{id}/experiment_allocations/{experimentId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    
    def getCustomerExperiments(self, **kwargs):
        r"""Get customer experiments

        Args:
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            id, str: The id of the user or &#39;me&#39; to get the userId from the login token (required)
            
            
            experimentId, str: The Experiment ID. If provided, only that experiment will be returned in the collection. (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\CustomerExperiment\CustomerExperimentCollection
        """

        allParams = ['country', 'id', 'experimentId', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getCustomerExperiments" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/customers/{id}/experiments'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'experimentId' in params:
            queryParams['experimentId'] = self.apiClient.toPathValue(params['experimentId'])
        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\CustomerExperiment\CustomerExperimentCollection')
        return responseObject
        
        
        
    
    def getCustomerFavorites(self, **kwargs):
        r"""List customer&#39;s favorite recipes

        Args:
            
            id, str: The id of the user or &#39;me&#39; to get the userId from the login token (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            exclude, str: Exclude properties e.g. exclude=customer,recipe (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
            skip, int: Number of results to skip (required)
            
            
            take, int: Number of results to show (required)
            
            
            sort, str: Sort by field(s) in the response collection.\n *       You can do ASC and DESC by using + and -. Default is +. Ex: ?sort=price,-createdAt (required)
            
            
        
        Returns: ApiModel\Favorite\FavoriteCollection
        """

        allParams = ['id', 'country', 'exclude', 'locale', 'skip', 'take', 'sort']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getCustomerFavorites" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/customers/{id}/favorites'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'exclude' in params:
            queryParams['exclude'] = self.apiClient.toPathValue(params['exclude'])
        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        
        if 'skip' in params:
            queryParams['skip'] = self.apiClient.toPathValue(params['skip'])
        
        if 'take' in params:
            queryParams['take'] = self.apiClient.toPathValue(params['take'])
        
        if 'sort' in params:
            queryParams['sort'] = self.apiClient.toPathValue(params['sort'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Favorite\FavoriteCollection')
        return responseObject
        
        
        
    
    def getCustomerInfo(self, **kwargs):
        r"""Get customer info

        Args:
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            id, str: The id of the user or &#39;me&#39; to get the userId from the login token (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\Customer\CustomerInfo
        """

        allParams = ['country', 'id', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getCustomerInfo" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/customers/{id}/info'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Customer\CustomerInfo')
        return responseObject
        
        
        
    
    def getCustomerNotificationSettings(self, **kwargs):
        r"""List customer&#39;s notification settings

        Args:
            
            id, str: The id of the user or &#39;me&#39; to get the userId from the login token (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
            skip, int: Number of results to skip (required)
            
            
            take, int: Number of results to show (required)
            
            
            sort, str: Sort by field(s) in the response collection.\n *       You can do ASC and DESC by using + and -. Default is +. Ex: ?sort=price,-createdAt (required)
            
            
        
        Returns: ApiModel\Customer\NotificationSetting\NotificationSettingCollection
        """

        allParams = ['id', 'country', 'locale', 'skip', 'take', 'sort']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getCustomerNotificationSettings" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/customers/{id}/notification_settings'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        
        if 'skip' in params:
            queryParams['skip'] = self.apiClient.toPathValue(params['skip'])
        
        if 'take' in params:
            queryParams['take'] = self.apiClient.toPathValue(params['take'])
        
        if 'sort' in params:
            queryParams['sort'] = self.apiClient.toPathValue(params['sort'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Customer\NotificationSetting\NotificationSettingCollection')
        return responseObject
        
        
        
    
    def updateCustomerNotificationSettings(self, **kwargs):
        r"""Updates a customer notification preferences

        Args:
            
            notificationsettings, ApiModel\Customer\UpdateNotificationSetting\UpdateNotificationSettingCollection: Array of notification settings to change (required)
            
            
            id, str: The id of the user or &#39;me&#39; to get the userId from the login token (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
        
        Returns: ApiModel\Customer\NotificationSetting\NotificationSettingCollection
        """

        allParams = ['notificationsettings', 'id', 'country']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateCustomerNotificationSettings" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/customers/{id}/notification_settings'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PATCH'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        
        if 'notificationsettings' in params:
            bodyParam = params['notificationsettings']
        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Customer\NotificationSetting\NotificationSettingCollection')
        return responseObject
        
        
        
    
    def getCustomerOrders(self, **kwargs):
        r"""Get orders which belong to specific customer

        Args:
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            id, str: The id of the user or &#39;me&#39; to get the userId from the login token (required)
            
            
            limit, int: Limits returned items (required)
            
            
            offset, int: Offsets returned items (required)
            
            
            orderIds, str: Order(id_sales_order) ids seprated by &#39;,&#39; and returns matching orders (required)
            
            
        
        Returns: ApiModel\Order\OrderCollection
        """

        allParams = ['country', 'id', 'limit', 'offset', 'orderIds']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getCustomerOrders" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/customers/{id}/orders'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'limit' in params:
            queryParams['limit'] = self.apiClient.toPathValue(params['limit'])
        
        if 'offset' in params:
            queryParams['offset'] = self.apiClient.toPathValue(params['offset'])
        
        if 'orderIds' in params:
            queryParams['orderIds'] = self.apiClient.toPathValue(params['orderIds'])
        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Order\OrderCollection')
        return responseObject
        
        
        
    
    def getCustomerRatings(self, **kwargs):
        r"""List customer&#39;s recipe ratings

        Args:
            
            id, str: The id of the user or &#39;me&#39; to get the userId from the login token (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            exclude, str: Exclude properties e.g. exclude=customer,recipe (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
            skip, int: Number of results to skip (required)
            
            
            take, int: Number of results to show (required)
            
            
            sort, str: Sort by field(s) in the response collection.\n *       You can do ASC and DESC by using + and -. Default is +. Ex: ?sort=price,-createdAt (required)
            
            
        
        Returns: ApiModel\Rating\RatingCollection
        """

        allParams = ['id', 'country', 'exclude', 'locale', 'skip', 'take', 'sort']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getCustomerRatings" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/customers/{id}/ratings'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'exclude' in params:
            queryParams['exclude'] = self.apiClient.toPathValue(params['exclude'])
        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        
        if 'skip' in params:
            queryParams['skip'] = self.apiClient.toPathValue(params['skip'])
        
        if 'take' in params:
            queryParams['take'] = self.apiClient.toPathValue(params['take'])
        
        if 'sort' in params:
            queryParams['sort'] = self.apiClient.toPathValue(params['sort'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Rating\RatingCollection')
        return responseObject
        
        
        
    
    def getCustomerRecipients(self, **kwargs):
        r"""List customer&#39;s recipients

        Args:
            
            id, str: The id of the user or &#39;me&#39; to get the userId from the login token (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
            skip, int: Number of results to skip (required)
            
            
            take, int: Number of results to show (required)
            
            
            sort, str: Sort by field(s) in the response collection.\n *       You can do ASC and DESC by using + and -. Default is +. Ex: ?sort=price,-createdAt (required)
            
            
        
        Returns: ApiModel\Collection\Collection
        """

        allParams = ['id', 'country', 'locale', 'skip', 'take', 'sort']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getCustomerRecipients" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/customers/{id}/recipients'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        
        if 'skip' in params:
            queryParams['skip'] = self.apiClient.toPathValue(params['skip'])
        
        if 'take' in params:
            queryParams['take'] = self.apiClient.toPathValue(params['take'])
        
        if 'sort' in params:
            queryParams['sort'] = self.apiClient.toPathValue(params['sort'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Collection\Collection')
        return responseObject
        
        
        
    
    def connectSocialAccount(self, **kwargs):
        r"""Connects the Customer to the social account corresponding to the supplied provider

        Args:
            
            socialProviderId, str: The provider identifier for the social account being connected (e.g.: &#39;facebook&#39;) (required)
            
            
            socialAuthData, map(String, str): Auth data required for the Social Provider being connected. (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            id, str: The id of the user or &#39;me&#39; to get the userId from the login token (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\SocialAccountAssociation\SocialAccountAssociation
        """

        allParams = ['socialProviderId', 'socialAuthData', 'country', 'id', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method connectSocialAccount" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/customers/{id}/social_account'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        
        if 'socialProviderId' in params:
            formParams['socialProviderId'] = params['socialProviderId']
        
        if 'socialAuthData' in params:
            formParams['socialAuthData'] = params['socialAuthData']
        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\SocialAccountAssociation\SocialAccountAssociation')
        return responseObject
        
        
        
    
    def disconnectSocialAccount(self, **kwargs):
        r"""Disconnects the Customer from the social account corresponding to the supplied provider

        Args:
            
            socialProviderId, str: The provider identifier for the social account being disconnected. (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            id, str: The id of the user or &#39;me&#39; to get the userId from the login token (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: 
        """

        allParams = ['socialProviderId', 'country', 'id', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method disconnectSocialAccount" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/customers/{id}/social_account'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'socialProviderId' in params:
            queryParams['socialProviderId'] = self.apiClient.toPathValue(params['socialProviderId'])
        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    
    def getCustomerStatus(self, **kwargs):
        r"""Show customer status

        Args:
            
            id, str: The id of the user or &#39;me&#39; to get the userId from the login token (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\CustomerStatus\CustomerStatus
        """

        allParams = ['id', 'country', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getCustomerStatus" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/customers/{id}/status'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\CustomerStatus\CustomerStatus')
        return responseObject
        
        
        
    
    def getCustomerSubscriptions(self, **kwargs):
        r"""Get customer subscriptions

        Args:
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            id, str: The id of the user or &#39;me&#39; to get the userId from the login token (required)
            
            
            status, str: Status of the subscription (required)
            
            
            _for, str: If `my-deliveries` sent, the response is a slim version which only has necessary fields. (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
            skip, int: Number of results to skip (required)
            
            
            take, int: Number of results to show (required)
            
            
            sort, str: Sort by field(s) in the response collection.\n *       You can do ASC and DESC by using + and -. Default is +. Ex: ?sort=price,-createdAt (required)
            
            
        
        Returns: ApiModel\Subscription\SubscriptionCollection
        """

        allParams = ['country', 'id', 'status', '_for', 'locale', 'skip', 'take', 'sort']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getCustomerSubscriptions" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/customers/{id}/subscriptions'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'status' in params:
            queryParams['status'] = self.apiClient.toPathValue(params['status'])
        
        if '_for' in params:
            queryParams['_for'] = self.apiClient.toPathValue(params['_for'])
        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        
        if 'skip' in params:
            queryParams['skip'] = self.apiClient.toPathValue(params['skip'])
        
        if 'take' in params:
            queryParams['take'] = self.apiClient.toPathValue(params['take'])
        
        if 'sort' in params:
            queryParams['sort'] = self.apiClient.toPathValue(params['sort'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Subscription\SubscriptionCollection')
        return responseObject
        
        
        
    
    def getCustomerSubscriptionsCount(self, **kwargs):
        r"""Get customer subscriptions count

        Args:
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            id, str: The id of the user or &#39;me&#39; to get the userId from the login token (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\Customer\CustomerSubscriptionsCount
        """

        allParams = ['country', 'id', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getCustomerSubscriptionsCount" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/customers/{id}/subscriptions_count'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Customer\CustomerSubscriptionsCount')
        return responseObject
        
        
        
    
    def socialSignUp(self, **kwargs):
        r"""Registers a Customer using a social provider

        Args:
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            socialProviderId, str: Unique Social Provider identifier (required)
            
            
            socialAuthData, map(String, str): Auth data for the Social Provider in use. (required)
            
            
            trackingMetadata, map(String, str): Keeps the origin of the user (required)
            
            
            subscribeToNewsletter, bool: Should user be subscribed to newsletter (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\Authentication\Authentication
        """

        allParams = ['country', 'socialProviderId', 'socialAuthData', 'trackingMetadata', 'subscribeToNewsletter', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method socialSignUp" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/social/signup'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        

        
        if 'socialProviderId' in params:
            formParams['socialProviderId'] = params['socialProviderId']
        
        if 'socialAuthData' in params:
            formParams['socialAuthData'] = params['socialAuthData']
        
        if 'trackingMetadata' in params:
            formParams['trackingMetadata'] = params['trackingMetadata']
        
        if 'subscribeToNewsletter' in params:
            formParams['subscribeToNewsletter'] = params['subscribeToNewsletter']
        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Authentication\Authentication')
        return responseObject
        
        
        
    


