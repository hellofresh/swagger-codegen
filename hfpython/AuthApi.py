#!/usr/bin/env python
"""
AuthApi.py
Copyright 2015 Reverb Technologies, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os
from urllib.parse import quote

from .models import *


class AuthApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    
    
    def resetPassword(self, **kwargs):
        r"""[DEPRECATED] Please don&#39;t use this anymore.\n     *     This endpoint is currently disabled

        Args:
            
            email, str: Email address of user to reset password for (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\Customer\ResetPassword\ResetPassword
        """

        allParams = ['email', 'country', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method resetPassword" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/auth/reset_password'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        

        
        if 'email' in params:
            formParams['email'] = params['email']
        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Customer\ResetPassword\ResetPassword')
        return responseObject
        
        
        
    
    def socialLogin(self, **kwargs):
        r"""Use this method to get a bearer token which can be used to interact with the api

        Args:
            
            grantType, str: The type of grant that needs to be issued (should be password) (required)
            
            
            clientId, str: The application id of the client system thats accessing the api (currently only &#39;dev&#39; works) (required)
            
            
            clientSecret, str: The client secret key. Currently leave this blank (required)
            
            
            scope, str: The scope that needs to be assigned to this access token.\n     *         (Should be set to &#39;public,customer&#39;) (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            socialProviderId, str: Unique Social Provider identifier (required)
            
            
            socialAuthData, map(String, str): Auth data for the Social Provider in use. (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\Authentication\Authentication
        """

        allParams = ['grantType', 'clientId', 'clientSecret', 'scope', 'country', 'socialProviderId', 'socialAuthData', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method socialLogin" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/social/login'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        

        
        if 'grantType' in params:
            formParams['grantType'] = params['grantType']
        
        if 'clientId' in params:
            formParams['clientId'] = params['clientId']
        
        if 'clientSecret' in params:
            formParams['clientSecret'] = params['clientSecret']
        
        if 'scope' in params:
            formParams['scope'] = params['scope']
        
        if 'socialProviderId' in params:
            formParams['socialProviderId'] = params['socialProviderId']
        
        if 'socialAuthData' in params:
            formParams['socialAuthData'] = params['socialAuthData']
        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Authentication\Authentication')
        return responseObject
        
        
        
    


