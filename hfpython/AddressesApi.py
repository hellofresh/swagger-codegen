#!/usr/bin/env python
"""
AddressesApi.py
Copyright 2015 Reverb Technologies, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os
from urllib.parse import quote

from .models import *


class AddressesApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    
    
    def getAddress(self, **kwargs):
        r"""Get address by id

        Args:
            
            id, int: Resource ID (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\Address\Address
        """

        allParams = ['id', 'country', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getAddress" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/addresses/{id}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Address\Address')
        return responseObject
        
        
        
    
    def updateAddress(self, **kwargs):
        r"""Update an address

        Args:
            
            address, ApiModel\Address\Address: Address payload (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            id, int: Resource ID (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\Address\Address
        """

        allParams = ['address', 'country', 'id', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateAddress" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/addresses/{id}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        
        if 'address' in params:
            bodyParam = params['address']
        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Address\Address')
        return responseObject
        
        
        
    
    def deleteCustomerAddress(self, **kwargs):
        r"""Delete customer address

        Args:
            
            id, int: Resource ID (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: 
        """

        allParams = ['id', 'country', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteCustomerAddress" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/addresses/{id}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    
    def updateCustomerPartialAddress(self, **kwargs):
        r"""Partial update of an address

        Args:
            
            address, Address: Address payload (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            id, int: Resource ID (required)
            
            
        
        Returns: ApiModel\Address\Address
        """

        allParams = ['address', 'country', 'id']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateCustomerPartialAddress" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/addresses/{id}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PATCH'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        
        if 'address' in params:
            bodyParam = params['address']
        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Address\Address')
        return responseObject
        
        
        
    


