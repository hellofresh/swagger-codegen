#!/usr/bin/env python
"""
SubscriptionsApi.py
Copyright 2015 Reverb Technologies, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os
from urllib.parse import quote

from .models import *


class SubscriptionsApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    
    
    def getDeliveriesByPartialSubscription(self, **kwargs):
        r"""Get unique list of subscription deliveries given a partial subscription

        Args:
            
            zip, str: Postcode (required)
            
            
            subscription, Object: Partial subscription payload (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            numDeliveries, str: Number of deliveries to return (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\DeliveryDate\DeliveryDateCollection
        """

        allParams = ['zip', 'subscription', 'country', 'numDeliveries', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getDeliveriesByPartialSubscription" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/subscriptions/deliveries'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'numDeliveries' in params:
            queryParams['numDeliveries'] = self.apiClient.toPathValue(params['numDeliveries'])
        
        if 'zip' in params:
            queryParams['zip'] = self.apiClient.toPathValue(params['zip'])
        
        if 'subscription' in params:
            queryParams['subscription'] = self.apiClient.toPathValue(params['subscription'])
        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\DeliveryDate\DeliveryDateCollection')
        return responseObject
        
        
        
    
    def postSubscriptionsSearch(self, **kwargs):
        r"""Search subscriptions with postcodes and option handles

        Args:
            
            optionHandles, list[str]: Array of option handles (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            postcodes, list[str]: Array of postcodes. If omitted, will search through all subscriptions. (required)
            
            
            limit, int: Limits returned items (required)
            
            
            cursorId, int: Cursor id to offset (required)
            
            
        
        Returns: ApiModel\Subscription\Search\Search
        """

        allParams = ['optionHandles', 'country', 'postcodes', 'limit', 'cursorId']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method postSubscriptionsSearch" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/subscriptions/search'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'limit' in params:
            queryParams['limit'] = self.apiClient.toPathValue(params['limit'])
        
        if 'cursorId' in params:
            queryParams['cursorId'] = self.apiClient.toPathValue(params['cursorId'])
        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        

        

        

        
        if 'optionHandles' in params:
            formParams['optionHandles'] = params['optionHandles']
        
        if 'postcodes' in params:
            formParams['postcodes'] = params['postcodes']
        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Subscription\Search\Search')
        return responseObject
        
        
        
    
    def postSubscriptionsProductFamilySearch(self, **kwargs):
        r"""Search subscriptions who belong to specific product family

        Args:
            
            handle, str: Product family handle (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            limit, int: Limits returned items (required)
            
            
            offset, int: Offsets returned items (required)
            
            
        
        Returns: ApiModel\Subscription\Search\SearchProductFamily
        """

        allParams = ['handle', 'country', 'limit', 'offset']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method postSubscriptionsProductFamilySearch" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/subscriptions/searchProductFamily'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'handle' in params:
            queryParams['handle'] = self.apiClient.toPathValue(params['handle'])
        
        if 'limit' in params:
            queryParams['limit'] = self.apiClient.toPathValue(params['limit'])
        
        if 'offset' in params:
            queryParams['offset'] = self.apiClient.toPathValue(params['offset'])
        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        

        

        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Subscription\Search\SearchProductFamily')
        return responseObject
        
        
        
    
    def getSubscription(self, **kwargs):
        r"""Get subscription by id

        Args:
            
            id, int: Resource ID (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\Subscription\Subscription
        """

        allParams = ['id', 'country', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getSubscription" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/subscriptions/{id}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Subscription\Subscription')
        return responseObject
        
        
        
    
    def updateSubscription(self, **kwargs):
        r"""Update subscription

        Args:
            
            subscription, Object: Subscription payload (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            id, int: Resource ID (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\Subscription\Subscription
        """

        allParams = ['subscription', 'country', 'id', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateSubscription" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/subscriptions/{id}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        
        if 'subscription' in params:
            formParams['subscription'] = params['subscription']
        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Subscription\Subscription')
        return responseObject
        
        
        
    
    def patchSubscription(self, **kwargs):
        r"""Update partially a subscription

        Args:
            
            subscription, ApiModel\Subscription\Subscription: Input to update (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            id, int: Resource ID (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\Subscription\Subscription
        """

        allParams = ['subscription', 'country', 'id', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method patchSubscription" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/subscriptions/{id}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PATCH'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        
        if 'subscription' in params:
            bodyParam = params['subscription']
        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Subscription\Subscription')
        return responseObject
        
        
        
    
    def postSubscriptionCancellation(self, **kwargs):
        r"""Cancels a Subscription

        Args:
            
            reason, str: The sentence stating the reason for cancelling the Subscription (required)
            
            
            id, int: Resource ID (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
        
        Returns: 
        """

        allParams = ['reason', 'id', 'country']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method postSubscriptionCancellation" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/subscriptions/{id}/cancellation'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        
        if 'reason' in params:
            formParams['reason'] = params['reason']
        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    
    def getCouponSubscriptionPrice(self, **kwargs):
        r"""Get price for the subscription after applying the coupon

        Args:
            
            code, str: Coupon code (required)
            
            
            id, int: Resource ID (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\Coupon\CouponFinalPrice
        """

        allParams = ['code', 'id', 'country', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getCouponSubscriptionPrice" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/subscriptions/{id}/coupon'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'code' in params:
            queryParams['code'] = self.apiClient.toPathValue(params['code'])
        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Coupon\CouponFinalPrice')
        return responseObject
        
        
        
    
    def getDeliveries(self, **kwargs):
        r"""Get unique list of subscription deliveries

        Args:
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            id, int: Resource ID (required)
            
            
            rangeStart, str: The first delivery in the list.\n     *         Date as string (YYYY-MM-DD) (required)
            
            
            rangeEnd, str: The last delivery in the list. Uses the same format as &#39;rangeStart&#39;. (required)
            
            
            rangeMiddle, str: The middle delivery in the list.\n     *         Uses the same format as &#39;rangeStart&#39;. Prefer sending also the desired &#39;numberOfDeliveries&#39;. (required)
            
            
            numberOfDeliveries, str: The number of deliveries in the list.\n     *         NOTE: It currently works only in combination with &#39;rangeMiddle&#39;. (required)
            
            
            bypassPastDeliveries, bool: Show only deliveries in the future (required)
            
            
            tentativeInterval, int: Return the deliveries the subscription would have if it had this interval (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\DeliveryDate\DeliveryDateCollection
        """

        allParams = ['country', 'id', 'rangeStart', 'rangeEnd', 'rangeMiddle', 'numberOfDeliveries', 'bypassPastDeliveries', 'tentativeInterval', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getDeliveries" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/subscriptions/{id}/deliveries'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'rangeStart' in params:
            queryParams['rangeStart'] = self.apiClient.toPathValue(params['rangeStart'])
        
        if 'rangeEnd' in params:
            queryParams['rangeEnd'] = self.apiClient.toPathValue(params['rangeEnd'])
        
        if 'rangeMiddle' in params:
            queryParams['rangeMiddle'] = self.apiClient.toPathValue(params['rangeMiddle'])
        
        if 'numberOfDeliveries' in params:
            queryParams['numberOfDeliveries'] = self.apiClient.toPathValue(params['numberOfDeliveries'])
        
        if 'bypassPastDeliveries' in params:
            queryParams['bypassPastDeliveries'] = self.apiClient.toPathValue(params['bypassPastDeliveries'])
        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        
        if 'tentativeInterval' in params:
            formParams['tentativeInterval'] = params['tentativeInterval']
        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\DeliveryDate\DeliveryDateCollection')
        return responseObject
        
        
        
    
    def getSubscriptionDeliveryDates(self, **kwargs):
        r"""Get delivery dates for subscription

        Args:
            
            id, int: Resource ID (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            numDeliveries, int: Number of deliveries to retrieve, by default 8 (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
            skip, int: Number of results to skip (required)
            
            
            take, int: Number of results to show (required)
            
            
            sort, str: Sort by field(s) in the response collection.\n *       You can do ASC and DESC by using + and -. Default is +. Ex: ?sort=price,-createdAt (required)
            
            
        
        Returns: ApiModel\DeliveryDate\DeliveryDateCollection
        """

        allParams = ['id', 'country', 'numDeliveries', 'locale', 'skip', 'take', 'sort']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getSubscriptionDeliveryDates" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/subscriptions/{id}/delivery_dates'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        
        if 'skip' in params:
            queryParams['skip'] = self.apiClient.toPathValue(params['skip'])
        
        if 'take' in params:
            queryParams['take'] = self.apiClient.toPathValue(params['take'])
        
        if 'sort' in params:
            queryParams['sort'] = self.apiClient.toPathValue(params['sort'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        
        if 'numDeliveries' in params:
            formParams['numDeliveries'] = params['numDeliveries']
        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\DeliveryDate\DeliveryDateCollection')
        return responseObject
        
        
        
    
    def updateSubscriptionDeliveries(self, **kwargs):
        r"""Set or unset weeks when customers will receive deliveries

        Args:
            
            deliveries, Object: List of delivery dates for a subscription that needs to be updated (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            id, int: Resource ID (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\DeliveryDate\DeliveryDateCollection
        """

        allParams = ['deliveries', 'country', 'id', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateSubscriptionDeliveries" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/subscriptions/{id}/delivery_dates'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PATCH'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        
        if 'deliveries' in params:
            formParams['deliveries'] = params['deliveries']
        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\DeliveryDate\DeliveryDateCollection')
        return responseObject
        
        
        
    
    def getSubscriptionDeliveryDates_1(self, **kwargs):
        r"""Get delivery dates for subscription

        Args:
            
            id, int: Resource ID (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            deliveryId, str: The delivery id in the format YYYY-Wmm (Eg 2015-W05) (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\DeliveryDate\DeliveryDateCollection
        """

        allParams = ['id', 'country', 'deliveryId', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getSubscriptionDeliveryDates_1" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/subscriptions/{id}/delivery_dates/{delivery_id}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        
        if 'deliveryId' in params:
            replacement = str(self.apiClient.toPathValue(params['deliveryId']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'delivery_id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\DeliveryDate\DeliveryDateCollection')
        return responseObject
        
        
        
    
    def updateSubscriptionDelivery(self, **kwargs):
        r"""Update the delivery for a specific week of a subscription

        Args:
            
            delivery, Object: Delivery date for a subscription that needs to be updated (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            id, int: Resource ID (required)
            
            
            deliveryId, str: The delivery id in the format YYYY-Wmm (Eg 2015-W05) (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\DeliveryDate\DeliveryDate
        """

        allParams = ['delivery', 'country', 'id', 'deliveryId', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateSubscriptionDelivery" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/subscriptions/{id}/delivery_dates/{delivery_id}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PATCH'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        
        if 'deliveryId' in params:
            replacement = str(self.apiClient.toPathValue(params['deliveryId']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'delivery_id' + '}',
                                                replacement)
        

        
        if 'delivery' in params:
            formParams['delivery'] = params['delivery']
        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\DeliveryDate\DeliveryDate')
        return responseObject
        
        
        
    
    def patchDeliveryInterval(self, **kwargs):
        r"""Changes the Delivery Interval for a Subscription

        Args:
            
            interval, str: The interval identifier (required)
            
            
            id, int: Resource ID (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
        
        Returns: 
        """

        allParams = ['interval', 'id', 'country']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method patchDeliveryInterval" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/subscriptions/{id}/delivery_interval'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PATCH'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'interval' in params:
            queryParams['interval'] = self.apiClient.toPathValue(params['interval'])
        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    
    def getSubscriptionDeliveryOptions(self, **kwargs):
        r"""Get delivery options for subscription

        Args:
            
            id, int: Resource ID (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\DeliveryOption\DeliveryOptionCollection
        """

        allParams = ['id', 'country', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getSubscriptionDeliveryOptions" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/subscriptions/{id}/delivery_options'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\DeliveryOption\DeliveryOptionCollection')
        return responseObject
        
        
        
    
    def postEndlessPause(self, **kwargs):
        r"""Set endless pause to subscription

        Args:
            
            id, int: Resource ID (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            interval, : Delivery paused interval (required)
            
            
            checkout, : When true, the Endless Pause will start from the last Order for the Customer (required)
            
            
        
        Returns: 
        """

        allParams = ['id', 'country', 'interval', 'checkout']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method postEndlessPause" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/subscriptions/{id}/endlessPause'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        
        if 'checkout' in params:
            bodyParam = params['checkout']
        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    
    def deleteEndlessPause(self, **kwargs):
        r"""Remove endless pause from subscription

        Args:
            
            id, int: Resource ID (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
        
        Returns: 
        """

        allParams = ['id', 'country']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteEndlessPause" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/subscriptions/{id}/endlessPause'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    
    def postSubscriptionFeedback(self, **kwargs):
        r"""Stores Customer feedback for a Subscription

        Args:
            
            feedbackContent, str: The feedback content text (required)
            
            
            id, int: Resource ID (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            contactCustomer, int: Either 0 or 1. If sent and is equal to 1, Customer will be contacted by Customer Care (required)
            
            
        
        Returns: 
        """

        allParams = ['feedbackContent', 'id', 'country', 'contactCustomer']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method postSubscriptionFeedback" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/subscriptions/{id}/feedback'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        
        if 'feedbackContent' in params:
            formParams['feedbackContent'] = params['feedbackContent']
        
        if 'contactCustomer' in params:
            formParams['contactCustomer'] = params['contactCustomer']
        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    
    def getSubscriptionMenus(self, **kwargs):
        r"""Get menus for subscription

        Args:
            
            id, int: Resource ID (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            week, str: Use this parameter to get the menu for a specific week.\n     *         Use the special value `next` for the upcoming week. (required)
            
            
            numberOfWeeks, int: Number of weeks in the future this will return from your specified week (required)
            
            
            excludeRecipes, bool: Exclude recipes from the response (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
            skip, int: Number of results to skip (required)
            
            
            take, int: Number of results to show (required)
            
            
            sort, str: Sort by field(s) in the response collection.\n *       You can do ASC and DESC by using + and -. Default is +. Ex: ?sort=price,-createdAt (required)
            
            
        
        Returns: ApiModel\Menu\MenuCollection
        """

        allParams = ['id', 'country', 'week', 'numberOfWeeks', 'excludeRecipes', 'locale', 'skip', 'take', 'sort']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getSubscriptionMenus" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/subscriptions/{id}/menus'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'week' in params:
            queryParams['week'] = self.apiClient.toPathValue(params['week'])
        
        if 'numberOfWeeks' in params:
            queryParams['numberOfWeeks'] = self.apiClient.toPathValue(params['numberOfWeeks'])
        
        if 'excludeRecipes' in params:
            queryParams['excludeRecipes'] = self.apiClient.toPathValue(params['excludeRecipes'])
        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        
        if 'skip' in params:
            queryParams['skip'] = self.apiClient.toPathValue(params['skip'])
        
        if 'take' in params:
            queryParams['take'] = self.apiClient.toPathValue(params['take'])
        
        if 'sort' in params:
            queryParams['sort'] = self.apiClient.toPathValue(params['sort'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Menu\MenuCollection')
        return responseObject
        
        
        
    
    def updateSubscriptionMenus(self, **kwargs):
        r"""Update the meal choices for a subscription for a given week

        Args:
            
            updateSubscriptionMenu, ApiModel\Menu\MenuPatchCollection: Delivery date for a subscription that needs to be updated (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            id, int: Resource ID (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\Menu\MenuCollection
        """

        allParams = ['updateSubscriptionMenu', 'country', 'id', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateSubscriptionMenus" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/subscriptions/{id}/menus'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PATCH'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        
        if 'updateSubscriptionMenu' in params:
            bodyParam = params['updateSubscriptionMenu']
        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Menu\MenuCollection')
        return responseObject
        
        
        
    
    def updateSubscriptionMenu(self, **kwargs):
        r"""Update the meal choices for a subscription for a given week

        Args:
            
            menu, Object: Delivery date for a subscription that needs to be updated (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            id, int: Resource ID (required)
            
            
            menuId, int: The menu id in the format YYYY-Wmm (Eg 2015-W05) (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\Menu\Menu
        """

        allParams = ['menu', 'country', 'id', 'menuId', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateSubscriptionMenu" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/subscriptions/{id}/menus/{menu_id}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PATCH'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        
        if 'menuId' in params:
            replacement = str(self.apiClient.toPathValue(params['menuId']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'menu_id' + '}',
                                                replacement)
        

        
        if 'menu' in params:
            formParams['menu'] = params['menu']
        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Menu\Menu')
        return responseObject
        
        
        
    
    def postSubscriptionOneOff(self, **kwargs):
        r"""Create a one off change for a subscription

        Args:
            
            week, str: Week for which we are scheduling the one off (required)
            
            
            id, int: Resource ID (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            sku, str: Product sku (required)
            
            
            deliveryOption, str: Delivey option handle (required)
            
            
        
        Returns: ApiModel\Subscription\ChangeSchedule\ChangeSchedule
        """

        allParams = ['week', 'id', 'country', 'sku', 'deliveryOption']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method postSubscriptionOneOff" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/subscriptions/{id}/oneoff'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'week' in params:
            queryParams['week'] = self.apiClient.toPathValue(params['week'])
        
        if 'sku' in params:
            queryParams['sku'] = self.apiClient.toPathValue(params['sku'])
        
        if 'deliveryOption' in params:
            queryParams['deliveryOption'] = self.apiClient.toPathValue(params['deliveryOption'])
        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Subscription\ChangeSchedule\ChangeSchedule')
        return responseObject
        
        
        
    
    def getSubscriptionOrders(self, **kwargs):
        r"""Returns subscription orders with status

        Args:
            
            id, int: Resource ID (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\OrderLine
        """

        allParams = ['id', 'country', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getSubscriptionOrders" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/subscriptions/{id}/orders'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\OrderLine')
        return responseObject
        
        
        
    
    def getChangePaymentMethodStatus(self, **kwargs):
        r"""Returns the current status of the payment method adjustment for the provided subscription id

        Args:
            
            id, int: Resource ID (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\Subscription\PaymentChangeStatus
        """

        allParams = ['id', 'country', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getChangePaymentMethodStatus" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/subscriptions/{id}/payment_status'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Subscription\PaymentChangeStatus')
        return responseObject
        
        
        
    
    def patchUpdateSubscriptionPreset(self, **kwargs):
        r"""Set subscription meal preset

        Args:
            
            preset, : Preset handler to be updated (required)
            
            
            id, int: Resource ID (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\Subscription\Subscription
        """

        allParams = ['preset', 'id', 'country', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method patchUpdateSubscriptionPreset" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/subscriptions/{id}/presets'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PATCH'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        
        if 'preset' in params:
            bodyParam = params['preset']
        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Subscription\Subscription')
        return responseObject
        
        
        
    
    def getSubscriptionProductOptions(self, **kwargs):
        r"""Get options to which product customer can change the subscription

        Args:
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            id, int: Resource ID (required)
            
            
            zip, str: Postcode (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\Product\ProductCollection
        """

        allParams = ['country', 'id', 'zip', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getSubscriptionProductOptions" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/subscriptions/{id}/product_options'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'zip' in params:
            queryParams['zip'] = self.apiClient.toPathValue(params['zip'])
        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Product\ProductCollection')
        return responseObject
        
        
        
    
    def reactivateSubscription(self, **kwargs):
        r"""Reactivate a subscription

        Args:
            
            subscription, Object: Reactivation subscription payload (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            id, int: Resource ID (required)
            
            
            coupon, str: Set a coupon code for this subscription (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: ApiModel\Subscription\Subscription
        """

        allParams = ['subscription', 'country', 'id', 'coupon', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method reactivateSubscription" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/subscriptions/{id}/reactivation'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        
        if 'subscription' in params:
            formParams['subscription'] = params['subscription']
        
        if 'coupon' in params:
            formParams['coupon'] = params['coupon']
        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Subscription\Subscription')
        return responseObject
        
        
        
    
    def getReactivationProductInfo(self, **kwargs):
        r"""Get product info for the subscription after reactivation.

        Args:
            
            id, int: Resource ID (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
        
        Returns: ApiModel\Subscription\Product\Product
        """

        allParams = ['id', 'country']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getReactivationProductInfo" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/subscriptions/{id}/reactivation/product_info'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Subscription\Product\Product')
        return responseObject
        
        
        
    
    def deleteSubscriptionRecipes(self, **kwargs):
        r"""[DEPRECATED] Please don&#39;t use this anymore.\n     *       This endpoint is currently disabled and will be removed.

        Args:
            
            week, str: Week for which we are deleting the meals choice (required)
            
            
            id, int: Resource ID (required)
            
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
            locale, str: Locale. Usage: ?locale=fr-BE (required)
            
            
        
        Returns: 
        """

        allParams = ['week', 'id', 'country', 'locale']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteSubscriptionRecipes" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/subscriptions/{id}/recipes'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'week' in params:
            queryParams['week'] = self.apiClient.toPathValue(params['week'])
        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        
        if 'locale' in params:
            queryParams['locale'] = self.apiClient.toPathValue(params['locale'])
        

        

        
        if 'id' in params:
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    
    def getSubscriptionInfo(self, **kwargs):
        r"""Get subscription info by id and week or sales order item

        Args:
            
            country, str: Country code(s). Usage: ?country=DE,US (required)
            
            
        
        Returns: ApiModel\Subscription\SubscriptionInfo\SubscriptionInfo
        """

        allParams = ['country']

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getSubscriptionInfo" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = 'internal/subscriptions/info'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = 'application/json'

        
        if 'country' in params:
            queryParams['country'] = self.apiClient.toPathValue(params['country'])
        

        

        

        

        

        postData = formParams if formParams else bodyParam

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, r'ApiModel\Subscription\SubscriptionInfo\SubscriptionInfo')
        return responseObject
        
        
        
    


