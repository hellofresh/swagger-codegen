<?php {{#models}}{{#model}}

namespace {{namespaceName}};

use Illuminate\Support\Contracts\ArrayableInterface;
use Illuminate\Support\Contracts\JsonableInterface;

/**
 * Entity of {{classname}}
 *
 * @author    Pepijn Senders <ps@hellofresh.com>
 * @package   hellofresh/php-client
 *
 */
class {{classname}} implements ArrayableInterface, JsonableInterface
{

    /**
     * Array of swaggertypes
     *
     * @var array
     */
    public static $swaggerTypes = [
        {{#vars}}'{{name}}' => '{{{datatype}}}'{{#hasMore}},
        {{/hasMore}}{{/vars}}
    ];
    {{#vars}}{{#description}}
    /**
     * Property {{name}}
     *{{#description}} {{{description}}}{{/description}}
     * @var {{datatype}}
     */{{/description}}
    public ${{name}};
    {{/vars}}
    /**
     * Create {{classname}} entity with array of keys with corresponding values
     *
     * @param array $data
     * @return void
     */
    public function __construct(array $data = [])
    {
        foreach ($data as $key => $value) {
            $this[$key] = $value;
        }
    }

    /**
     * Convert entity to array
     *
     * @return array $entity
     */
    public function toArray()
    {
        $entity = [];

        foreach (self::$swaggerTypes as $name => $type) {
            if (starts_with($name, 'HelloFresh\Api\PhpClient\Entities') && class_exists($name)) {
                $entity[$name] = $this->$name->toArray();
            } else {
                $entity[$name] = $this->$name;
            }
        }

        return $entity;
    }

    /**
     * Convert entity to Json
     *
     * @param  integer $options
     * @return string
     */
    public function toJson($options = 0)
    {
        return json_encode($this->toArray(), $options);
    }
}
{{/model}}
{{/models}}
