<?php

namespace HelloFresh\HelloFreshClient;

use HelloFresh\BaseClient\Client;
use HelloFresh\HelloFreshClient\Purpose;
use HelloFresh\HelloFreshClient\Entity\Authentication;
use GuzzleHttp\Message\ResponseInterface;
use HelloFresh\BaseClient\Auth\Auth;
use HelloFresh\BaseClient\Auth\AccessToken;
use HelloFresh\BaseClient\Exception\AccessTokenExpiredException;
use GuzzleHttp\Message\RequestInterface;

/**{{#apiInfo}}{{#apis}}{{#operations}}
* @property-read Purpose\{{classname}} ${{classVarName}}{{/operations}}{{/apis}}{{/apiInfo}}
*/
class HelloFreshClient implements HelloFreshClientInterface extends Client
{
    const DEFAULT_BASE_URL = 'https://api-{version}.hellofresh.com';
    const DEFAULT_BASE_VERSION = 'v2';

    const DEFAULT_USER_AGENT = 'HelloFreshClient';

    /**
    * @param  ResponseInterface $response
    * @return HelloFreshResponse
    */
    protected function decorateResponse(ResponseInterface $response)
    {
        return new HelloFreshResponse($response);
    }

    /**
    * @inheritdoc
    */
    protected function handleException($clientMethod, array $clientArguments, \Exception $e)
    {
        if ($e instanceof AccessTokenExpiredException) {
            $auth = $this->authProvider->getAuth();

            $refreshToken = $auth->getRefreshToken();

            $this->authProvider->removeAuth();

            if (!empty($refreshToken)) {
                $response = $this->auth->renewToken([
                    'grant_type' => 'refresh_token',
                    'refresh_token' => $auth->getRefreshToken(),
                    'scope' => $this->authProvider->getScope(),
                ]);

                $authModel = $response->getModel();

                if ($authModel instanceof Authentication) {
                    $auth = new Auth(
                        $authModel->token_type,
                        new AccessToken($authModel->access_token, $authModel->expires_in),
                        $authModel->refresh_token
                    );

                    $this->authProvider->refreshAuth($auth);

                    return $this->handleClientMethod($clientMethod, $clientArguments);
                }
            }
        }

        return parent::handleException($clientMethod, $clientArguments, $e);
    }

    /**
     * @inheritdoc
     */
    public function createRequest($method, $url = null, array $options = [])
    {
        return $this->client->createRequest($method, $url, $options);
    }

    /**
     * @inheritdoc
     */
    public function get($url = null, $options = [])
    {
        return $this->forwardHttpMethod(__FUNCTION__, [ $url, $options ]);
    }

    /**
     * @inheritdoc
     */
    public function head($url = null, array $options = [])
    {
        return $this->forwardHttpMethod(__FUNCTION__, [ $url, $options ]);
    }

    /**
     * @inheritdoc
     */
    public function delete($url = null, array $options = [])
    {
        return $this->forwardHttpMethod(__FUNCTION__, [ $url, $options ]);
    }

    /**
     * @inheritdoc
     */
    public function put($url = null, array $options = [])
    {
        return $this->forwardHttpMethod(__FUNCTION__, [ $url, $options ]);
    }

    /**
     * @inheritdoc
     */
    public function patch($url = null, array $options = [])
    {
        return $this->forwardHttpMethod(__FUNCTION__, [ $url, $options ]);
    }

    /**
     * @inheritdoc
     */
    public function post($url = null, array $options = [])
    {
        return $this->forwardHttpMethod(__FUNCTION__, [ $url, $options ]);
    }

    /**
     * @inheritdoc
     */
    public function options($url = null, array $options = [])
    {
        return $this->forwardHttpMethod(__FUNCTION__, [ $url, $options ]);
    }

    /**
     * @inheritdoc
     */
    public function send(RequestInterface $request)
    {
        return $this->forwardHttpMethod(__FUNCTION__, [ $request ]);
    }

}
