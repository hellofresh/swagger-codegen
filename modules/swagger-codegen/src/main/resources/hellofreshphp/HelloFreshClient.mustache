<?php

namespace HelloFresh\HelloFreshClient;

use HelloFresh\BaseClient\Client;
use HelloFresh\HelloFreshClient\Purpose;
use HelloFresh\HelloFreshClient\Entities\Authentication\Authentication;
use GuzzleHttp\Message\ResponseInterface;
use HelloFresh\BaseClient\Auth\Auth;
use HelloFresh\BaseClient\Exception\AccessTokenExpiredException;

/**
 * @property-read Purpose\Allergens $allergens
 * @property-read Purpose\Products $products
 * @property-read Purpose\Recipients $recipients
 * @property-read Purpose\Subscriptions $subscriptions
 * @property-read Purpose\Customersidreferrals $customersidreferrals
 * @property-read Purpose\Nutritions $nutritions
 * @property-read Purpose\Ratings $ratings
 * @property-read Purpose\Addresses $addresses
 * @property-read Purpose\Presets $presets
 * @property-read Purpose\Cuisines $cuisines
 * @property-read Purpose\Jobs $jobs
 * @property-read Purpose\Test $test
 * @property-read Purpose\Auth $auth
 * @property-read Purpose\Configurations $configurations
 * @property-read Purpose\Tags $tags
 * @property-read Purpose\Shops $shops
 * @property-read Purpose\Ingredients $ingredients
 * @property-read Purpose\Freebies $freebies
 * @property-read Purpose\Ingredientfamilies $ingredientfamilies
 * @property-read Purpose\Utensils $utensils
 * @property-read Purpose\Deliveryoptions $deliveryoptions
 * @property-read Purpose\Customers $customers
 * @property-read Purpose\Productfamilies $productfamilies
 * @property-read Purpose\Menus $menus
 * @property-read Purpose\Recipes $recipes
 * @property-read Purpose\Clubs $clubs
 * @property-read Purpose\Favorites $favorites
 */
class HelloFreshClient extends Client
{
    const DEFAULT_BASE_URL = 'https://api-{version}.hellofresh.com';
    const DEFAULT_BASE_VERSION = 'v2';

    const DEFAULT_USER_AGENT = 'HelloFreshClient';

    /**
     * @param  ResponseInterface $response
     * @return HelloFreshResponse
     */
    protected function decorateResponse(ResponseInterface $response)
    {
        return new HelloFreshResponse($response);
    }

    /**
     * @inherit
     */
    protected function handleException($clientMethod, array $clientArguments, \Exception $e)
    {
        if ($e instanceof AccessTokenExpiredException) {
            $refreshToken = $this->authProvider->getRefreshToken();

            $this->authProvider->refreshAuth();

            if ($refreshToken) {
                $response = $this->auth->renewToken([
                    'grant_type' => 'refresh_token',
                    'refresh_token' => $refreshToken,
                ]);

                $authModel =  $response->getModel();

                if ($authModel instanceof Authentication) {
                    $auth = new Auth(
                        $authModel->token_type,
                        new AccessToken($authModel->access_token, $authModel->expires_in)
                    );

                    $this->authProvider->refreshAuth(
                        $auth,
                        $authResponse->refresh_token
                    );

                    return $this->execute($clientMethod, $clientArguments);
                }
            }
        }

        return parent::handleException($clientMethod, $clientArguments, $e);
    }
}
