{{#operations}}<?php

namespace HelloFresh\HelloFreshClient\Purpose;

use HelloFresh\HelloFreshClient\HelloFreshClient;
use HelloFresh\HelloFreshClient\Deserializer;
use HelloFresh\BaseClient\AbstractPurpose;
use HelloFresh\BaseClient\HttpInterface;
use HelloFresh\BaseClient\Auth\Auth;
use HelloFresh\BaseClient\Auth\AuthProvider;

/**
 * Short-hand functions to the {{classname}} API
 *
 * @author    Pepijn Senders <ps@hellofresh.com>
 * @package   hellofresh/php-client
 *
 */
class {{classname}} extends AbstractPurpose
{
    /**
     * @var HelloFreshClient
     */
    protected $client;

    /**
     * @param HelloFreshClient
     */
    public function __construct(HelloFreshClient $client)
    {
        $this->client = $client;
    }

{{#operation}}
    /**
     * Nickname: {{{nickname}}}
     *
     * {{{summary}}}
     *
     * Parameters:
     *
{{#allParams}}     *    - `{{dataType}} ${{paramName}} {{description}} {{^optional}}(required){{/optional}}{{#optional}}(optional){{/optional}}`
{{/allParams}}
     *
     * @param  array $parameters
     */
    public function {{nickname}}($parameters = [])
    {
        $authProvider = $this->client->getAuthProvider();
        if ($authProvider instanceof AuthProvider) {
            $auth = $authProvider->getAuth();

            if ($auth instanceof Auth) {
                array_merge([
                    'client_id' => $auth->getClientId(),
                    'client_secret' => $auth->getClientSecret(),
                ], $parameters);
            }
        }

        if ('{{httpMethod}}' === HttpInterface::GET) {
            $options = [
                'query' => $parameters,
            ];
        } else {
            $options = [
                'body' => $parameters,
            ];
        }

        $response = $this->client->{{lcHttpMethod}}('{{path}}', $options);

        {{#returnType}}return Deserializer::deserialize('{{returnType}}', $response);{{/returnType}}
        {{^returnType}}return $response;{{/returnType}}
    }

{{/operation}}
}{{/operations}}
