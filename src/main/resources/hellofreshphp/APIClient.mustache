<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */
namespace Hellofresh\Client\Api;

class APIClient implements IAPIClient
{
    public static $POST = "POST";
    public static $GET = "GET";
    public static $PUT = "PUT";
    public static $DELETE = "DELETE";

    /**
     * @param string $apiServer the address of the API server
     * @param string $token OAuth token that needs to be used for the Authorization header
     */
    function __construct($apiServer,$oauthToken=null)
    {

        $this->apiServer = $apiServer;
        $this->setOAuthToken($oauthToken);

    }

    /**
     * @param string $token OAuth token that needs to be used for the Authorization header
     * @return mixed|null
     */
    function setOAuthToken($token)
    {
        $this->oauthToken = $token;
    }

    /**
     * @param string $resourcePath path to method endpoint
     * @param string $method method to call
     * @param array $queryParams parameters to be place in query URL
     * @param array $postData parameters to be placed in POST body
     * @param array $headerParams parameters to be place in request header
     * @throws Exception
     * @return mixed|null
     */
    public function callAPI($resourcePath, $method, $queryParams, $postData, $headerParams)
    {
        $headers = (is_array($headerParams)?$headerParams:array());
        $headers["Content-Type"] = "application/json";

        if(!isset($headers["Authorization"]) && $this->oauthToken != null){
            $headers["Authorization"] = "Bearer " . $this->oauthToken;
        }

        $curlHeaders = [];
        foreach($headers as $type => $header){
            $curlHeaders[] = $type.": " .$header;
        }

        if (is_object($postData) or is_array($postData)) {
            $postData = json_encode($this->sanitizeForSerialization($postData));
        }

        $url = $this->apiServer . $resourcePath;

        $curl = curl_init();

        curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 0);
        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);

        curl_setopt($curl, CURLOPT_TIMEOUT, 0);
        // return the result on success, rather than just TRUE
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($curl, CURLOPT_HTTPHEADER, $curlHeaders);

        if (!empty($queryParams)) {
            $url = ($url . '?' . http_build_query($queryParams));
        }

        if ($method == self::$POST) {
            curl_setopt($curl, CURLOPT_POST, true);
            curl_setopt($curl, CURLOPT_POSTFIELDS, $postData);
        } else {
            if ($method == self::$PUT) {
                curl_setopt($curl, CURLOPT_CUSTOMREQUEST, "PUT");
                curl_setopt($curl, CURLOPT_POSTFIELDS, $postData);
            } else {
                if ($method == self::$DELETE) {
                    curl_setopt($curl, CURLOPT_CUSTOMREQUEST, "DELETE");
                    curl_setopt($curl, CURLOPT_POSTFIELDS, $postData);
                } else {
                    if ($method != self::$GET) {
                        throw new Exception('Method ' . $method . ' is not recognized.');
                    }
                }
            }
        }
        curl_setopt($curl, CURLOPT_URL, $url);

        // Make the request
        $response = curl_exec($curl);
        $response_info = curl_getinfo($curl);

        // Handle the response
        if ($response_info['http_code'] == 0) {
            throw new Exception("TIMEOUT: api call to " . $url .
                " took more than 5s to return");
        } else {
            if ($response_info['http_code'] == 200) {
                $data = json_decode($response);
            } else {
                if ($response_info['http_code'] == 401) {
                    throw new Exception("Unauthorized API request to " . $url .
                        ": " . json_decode($response)->message);
                } else {
                    if ($response_info['http_code'] == 404) {
                        $data = null;
                    } else {
                        throw new Exception("Can't connect to the api: " . $url .
                            " response code: " .
                            $response_info['http_code']);
                    }
                }
            }
        }

        return $data;
    }

    /**
     * Build a JSON POST object
     */
    protected function sanitizeForSerialization($data)
    {
        if (is_scalar($data) || null === $data) {
            $sanitized = $data;
        } else {
            if ($data instanceof \DateTime) {
                $sanitized = $data->format(\DateTime::ISO8601);
            } else {
                if (is_array($data)) {
                    foreach ($data as $property => $value) {
                        $data[$property] = $this->sanitizeForSerialization($value);
                    }
                    $sanitized = $data;
                } else {
                    if (is_object($data)) {
                        $values = array();
                        foreach (array_keys($data::$swaggerTypes) as $property) {
                            $values[$property] = $this->sanitizeForSerialization($data->$property);
                        }
                        $sanitized = $values;
                    } else {
                        $sanitized = (string)$data;
                    }
                }
            }
        }

        return $sanitized;
    }

    /**
     * Take value and turn it into a string suitable for inclusion in
     * the path, by url-encoding.
     * @param string $value a string which will be part of the path
     * @return string the serialized object
     */
    public static function toPathValue($value)
    {
        return rawurlencode($value);
    }

    /**
     * Take value and turn it into a string suitable for inclusion in
     * the query, by imploding comma-separated if it's an object.
     * If it's a string, pass through unchanged. It will be url-encoded
     * later.
     * @param object $object an object to be serialized to a string
     * @return string the serialized object
     */
    public static function toQueryValue($object)
    {
        if (is_array($object)) {
            return implode(',', $object);
        } else {
            return $object;
        }
    }

    /**
     * Just pass through the header value for now. Placeholder in case we
     * find out we need to do something with header values.
     * @param string $value a string which will be part of the header
     * @return string the header string
     */
    public static function toHeaderValue($value)
    {
        return $value;
    }

    /**
     * Deserialize a JSON string into an object
     *
     * @param object $object object or primitive to be deserialized
     * @param string $class class name is passed as a string
     * @return object an instance of $class
     */
    public static function deserialize($data, $class)
    {
        if (null === $data) {
            $deserialized = null;
        } else {
            if (strcasecmp(substr($class, 0, 6), 'array[') == 0) {
                $subClass = substr($class, 6, -1);
                $values = array();
                foreach ($data as $value) {
                    $values[] = self::deserialize($value, $subClass);
                }
                $deserialized = $values;
            } elseif ($class == 'DateTime') {
                $deserialized = new \DateTime($data);
            } elseif (in_array($class, array('string', 'int', 'float', 'bool'))) {
                $data = (is_object($data) || is_array($data)) ? json_encode($data) : $data;
                settype($data, $class);
                $deserialized = $data;
            } else {
                $instance = new $class();
                foreach ($instance::$swaggerTypes as $property => $type) {
                    if (isset($data->$property)) {
                        $instance->$property = self::deserialize($data->$property, $type);
                    }
                }
                $deserialized = $instance;
            }
        }

        return $deserialized;
    }

}

